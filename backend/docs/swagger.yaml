basePath: /api/v1
definitions:
  handlers.AuthResponse:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  handlers.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  models.ChangePasswordRequest:
    properties:
      currentPassword:
        type: string
      newPassword:
        minLength: 6
        type: string
    required:
    - currentPassword
    - newPassword
    type: object
  models.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  models.RegisterRequest:
    properties:
      businessName:
        example: 美麗髮廊
        maxLength: 100
        minLength: 2
        type: string
      email:
        example: user@example.com
        type: string
      name:
        example: 張三
        maxLength: 50
        minLength: 2
        type: string
      password:
        example: password123
        minLength: 6
        type: string
    required:
    - businessName
    - email
    - name
    - password
    type: object
  models.UpdateUserRequest:
    properties:
      businessName:
        maxLength: 100
        minLength: 2
        type: string
      name:
        maxLength: 50
        minLength: 2
        type: string
    type: object
host: localhost:3001
info:
  contact:
    email: dev@beautyaigo.com
    name: BeautyAI Team
  description: BeautyAI Beauty Management System API Documentation
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: BeautyAI API
  version: "1.0"
paths:
  /api/v1/auth/change-password:
    post:
      consumes:
      - application/json
      description: Change current user's password
      parameters:
      - description: Password change data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - Authentication
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT tokens
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
      summary: Login user
      tags:
      - Authentication
  /api/v1/auth/logout:
    post:
      description: Logout current user and invalidate token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - Authentication
  /api/v1/auth/me:
    get:
      description: Get the profile of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
      security:
      - BearerAuth: []
      summary: Get current user profile
      tags:
      - Authentication
  /api/v1/auth/profile:
    put:
      consumes:
      - application/json
      description: Update current user's profile information
      parameters:
      - description: Update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - Authentication
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh the JWT access token using refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
      summary: Refresh access token
      tags:
      - Authentication
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account with business information
      parameters:
      - description: Registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
      summary: Register a new user
      tags:
      - Authentication
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
