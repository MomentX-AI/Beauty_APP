package model

import (
	"time"

	"gorm.io/gorm"
)

// KSUID is an alias for string, typically used for primary keys.
// It's expected to be a K-Sortable Globally Unique ID with a char(27) representation in the database.
type KSUID = string

// --- User and RBAC System ---

// User represents the system's user entity.
// Users can log in and are assigned roles that grant permissions.
type User struct {
	ID        KSUID          `json:"id" gorm:"type:char(27);primaryKey"`
	Email     string         `json:"email" gorm:"uniqueIndex;size:100;not null"`
	Username  string         `json:"username" gorm:"uniqueIndex;size:50;not null"`
	Password  string         `json:"-" gorm:"size:255;not null"` // Password hash, not exposed in JSON
	FirstName string         `json:"first_name" gorm:"size:50"`
	LastName  string         `json:"last_name" gorm:"size:50"`
	Active    bool           `json:"active" gorm:"default:true"`
	CreatedAt time.Time      `json:"created_at" gorm:"autoCreateTime"`
	UpdatedAt time.Time      `json:"updated_at" gorm:"autoUpdateTime"`
	DeletedAt gorm.DeletedAt `json:"-" gorm:"index"` // Soft delete support
}

// Role defines a user role within the system (e.g., admin, manager, staff).
// Roles are collections of permissions.
type Role struct {
	ID          KSUID        `json:"id" gorm:"type:char(27);primaryKey"` // Updated from int
	Name        string       `json:"name" gorm:"uniqueIndex;not null;size:50"`
	Description string       `json:"description"`
	CreatedAt   time.Time    `json:"created_at"`
	UpdatedAt   time.Time    `json:"updated_at"`
	Permissions []Permission `json:"permissions,omitempty" gorm:"many2many:role_permissions;"`
}

// Permission defines a specific action on a resource (e.g., customer:create).
type Permission struct {
	ID          KSUID     `json:"id" gorm:"type:char(27);primaryKey"` // Updated from int
	Resource    string    `json:"resource" gorm:"not null;size:100;index:idx_resource_action,priority:1"`
	Action      string    `json:"action" gorm:"not null;size:50;index:idx_resource_action,priority:2"`
	Description string    `json:"description"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

// UserRole represents the assignment of a Role to a User, potentially scoped to a Business and/or Branch.
// It defines which user has what role within which business/branch context.
type UserRole struct {
	UserID      KSUID      `json:"user_id" gorm:"type:char(27);primaryKey;index:idx_user_business_role,unique"` // Added unique constraint for composite key
	RoleID      KSUID      `json:"role_id" gorm:"type:char(27);primaryKey;index:idx_user_business_role,unique"` // Updated from int
	BusinessID  KSUID      `json:"business_id" gorm:"type:char(27);primaryKey;index:idx_user_business_role,unique"`
	BranchID    *KSUID     `json:"branch_id,omitempty" gorm:"type:char(27);index"`
	EffectiveAt *time.Time `json:"effective_at,omitempty" gorm:"index"`
	ExpiresAt   *time.Time `json:"expires_at,omitempty" gorm:"index"`
	CreatedAt   time.Time  `json:"created_at"`
	UpdatedAt   time.Time  `json:"updated_at"`

	// Relationships
	// User User `gorm:"foreignKey:UserID"` // Omitted for brevity in design doc, assumed by convention
	Role Role `gorm:"foreignKey:RoleID"`
	// Business Business `gorm:"foreignKey:BusinessID"`
	// Branch *Branch `gorm:"foreignKey:BranchID"`
}

// RolePermission is the join table for the many-to-many relationship between Roles and Permissions.
type RolePermission struct {
	RoleID       KSUID     `json:"role_id" gorm:"type:char(27);primaryKey"` // Updated from int
	PermissionID KSUID     `json:"permission_id" gorm:"type:char(27);primaryKey"` // Updated from int
	CreatedAt    time.Time `json:"created_at" gorm:"autoCreateTime"`

	// Relationships
	Role       *Role       `json:"-" gorm:"foreignKey:RoleID"`
	Permission *Permission `json:"-" gorm:"foreignKey:PermissionID"`
}

// --- Business Core Models ---

// Business represents a merchant's business entity.
type Business struct {
	ID          KSUID          `json:"id" gorm:"type:char(27);primaryKey"`
	Name        string         `json:"name" gorm:"size:100;not null"`
	Description string         `json:"description" gorm:"size:500"`
	Address     string         `json:"address" gorm:"size:200"`
	Phone       string         `json:"phone" gorm:"size:20"`
	Email       string         `json:"email" gorm:"size:100"`
	Website     string         `json:"website" gorm:"size:100"`
	LogoURL     string         `json:"logo_url" gorm:"size:255"`
	IsActive    bool           `json:"is_active" gorm:"default:true"`
	OwnerID     KSUID          `json:"owner_id" gorm:"type:char(27);not null"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
	DeletedAt   gorm.DeletedAt `json:"deleted_at" gorm:"index"`

	// Relationships
	Owner    User     `json:"-" gorm:"foreignKey:OwnerID"`
	Branches []Branch `json:"-" gorm:"foreignKey:BusinessID"`
	// Other relationships like TeamMembers, ServiceCategories, etc., are defined in their respective models
}

// Branch represents a physical store location of a Business.
type Branch struct {
	ID           KSUID          `json:"id" gorm:"type:char(27);primaryKey"`
	BusinessID   KSUID          `json:"business_id" gorm:"type:char(27);not null;index"`
	Name         string         `json:"name" gorm:"not null;size:255" validate:"required"`
	ContactPhone *string        `json:"contact_phone,omitempty" gorm:"size:50" validate:"omitempty,e164"`
	Address      *string        `json:"address,omitempty"`
	IsDefault    bool           `json:"is_default" gorm:"default:false"`
	Status       string         `json:"status" gorm:"not null;default:'active';size:20"` // e.g., active, inactive, closed
	CreatedAt    time.Time      `json:"created_at"`
	UpdatedAt    time.Time      `json:"updated_at"`
	DeletedAt    gorm.DeletedAt `json:"-" gorm:"index"`

	// Relationships
	Business    Business     `json:"-" gorm:"foreignKey:BusinessID"`
	TeamMembers []TeamMember `json:"-" gorm:"foreignKey:BranchID"`
}

// TeamMemberRole defines the role of a team member within the business.
type TeamMemberRole string

const (
	RoleStylist      TeamMemberRole = "stylist"
	RoleTechnician   TeamMemberRole = "technician"
	RoleAssistant    TeamMemberRole = "assistant"
	RoleReceptionist TeamMemberRole = "receptionist"
	RoleManager      TeamMemberRole = "manager"
	RoleTrainee      TeamMemberRole = "trainee"
)

// TeamMember represents an employee or staff member associated with a Business and a Branch.
type TeamMember struct {
	ID         KSUID          `json:"id" gorm:"type:char(27);primaryKey"`
	BusinessID KSUID          `json:"business_id" gorm:"type:char(27);not null;index"` // Denormalized for easier queries
	BranchID   KSUID          `json:"branch_id" gorm:"type:char(27);not null;index"`
	UserID     *KSUID         `json:"user_id,omitempty" gorm:"type:char(27);index"` // Optional link to a User account
	Name       string         `json:"name" gorm:"size:50;not null"`
	Phone      string         `json:"phone" gorm:"size:20;not null"` // Consider validation
	Email      string         `json:"email" gorm:"size:100"`         // Consider validation & uniqueness per business
	Role       TeamMemberRole `json:"role" gorm:"size:20;not null"`
	Bio        string         `json:"bio" gorm:"size:500"`
	PhotoURL   string         `json:"photo_url" gorm:"size:255"`
	IsActive   bool           `json:"is_active" gorm:"default:true"`
	CreatedAt  time.Time      `json:"created_at"`
	UpdatedAt  time.Time      `json:"updated_at"`
	DeletedAt  gorm.DeletedAt `json:"-" gorm:"index"`

	// Relationships
	Business Business `json:"-" gorm:"foreignKey:BusinessID"`
	Branch   Branch   `json:"-" gorm:"foreignKey:BranchID"`
	User     *User    `json:"-" gorm:"foreignKey:UserID"`
}

// --- Service Management ---

// ServiceCategory groups service items (e.g., Haircuts, Coloring).
type ServiceCategory struct {
	ID          KSUID          `json:"id" gorm:"type:char(27);primaryKey"`
	BusinessID  KSUID          `json:"business_id" gorm:"type:char(27);index;not null"`
	Name        string         `json:"name" gorm:"size:100;not null"`
	Description *string        `json:"description,omitempty" gorm:"type:text"`
	IsActive    bool           `json:"is_active" gorm:"default:true"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
	DeletedAt   gorm.DeletedAt `json:"-" gorm:"index"`

	// Relationships
	Business Business `json:"-" gorm:"foreignKey:BusinessID"`
	// ServiceItems []ServiceItem `json:"-" gorm:"foreignKey:ServiceCategoryID"` // Implied relationship
}

// ServiceItem represents a specific service offered by the business.
type ServiceItem struct {
	ID                KSUID          `json:"id" gorm:"type:char(27);primaryKey"`
	BusinessID        KSUID          `json:"business_id" gorm:"type:char(27);index;not null"`
	ServiceCategoryID KSUID          `json:"service_category_id" gorm:"type:char(27);index;not null"`
	Name              string         `json:"name" gorm:"size:100;not null"`
	Description       *string        `json:"description,omitempty" gorm:"type:text"`
	Price             float64        `json:"price" gorm:"type:decimal(10,2);not null"`
	DurationMinutes   int            `json:"duration_minutes" gorm:"not null"`
	IsActive          bool           `json:"is_active" gorm:"default:true"`
	CreatedAt         time.Time      `json:"created_at"`
	UpdatedAt         time.Time      `json:"updated_at"`
	DeletedAt         gorm.DeletedAt `json:"-" gorm:"index"`

	// Relationships
	Business        Business        `json:"-" gorm:"foreignKey:BusinessID"`
	ServiceCategory ServiceCategory `json:"-" gorm:"foreignKey:ServiceCategoryID"`
}

// --- Customer and Appointments ---

// Customer represents a client of the business.
type Customer struct {
	ID         KSUID          `json:"id" gorm:"type:char(27);primaryKey"`
	BusinessID KSUID          `json:"business_id" gorm:"type:char(27);index;not null"`
	FirstName  string         `json:"first_name" gorm:"size:100"`
	LastName   string         `json:"last_name" gorm:"size:100"`
	Email      *string        `json:"email,omitempty" gorm:"size:255;index"` // Consider unique index per business: idx_customer_business_email
	Phone      *string        `json:"phone,omitempty" gorm:"size:50;index"`  // Consider unique index per business: idx_customer_business_phone
	CreatedAt  time.Time      `json:"created_at"`
	UpdatedAt  time.Time      `json:"updated_at"`
	DeletedAt  gorm.DeletedAt `json:"-" gorm:"index"`

	// Relationships
	Business Business `json:"-" gorm:"foreignKey:BusinessID"`
	// Appointments []Appointment `json:"-" gorm:"foreignKey:CustomerID"`
	// ServiceRecords []CustomerServiceRecord `json:"-" gorm:"foreignKey:CustomerID"`
}

// AppointmentStatus defines the possible statuses of an appointment.
type AppointmentStatus string

const (
	StatusScheduled AppointmentStatus = "scheduled"
	StatusConfirmed AppointmentStatus = "confirmed"
	StatusCancelled AppointmentStatus = "cancelled"
	StatusCompleted AppointmentStatus = "completed"
	StatusNoShow    AppointmentStatus = "no_show"
)

// Appointment represents a booking made by a customer for a service.
type Appointment struct {
	ID            KSUID             `json:"id" gorm:"type:char(27);primaryKey"`
	BusinessID    KSUID             `json:"business_id" gorm:"type:char(27);index;not null"`
	BranchID      KSUID             `json:"branch_id" gorm:"type:char(27);index;not null"`
	CustomerID    KSUID             `json:"customer_id" gorm:"type:char(27);index;not null"`
	ServiceItemID KSUID             `json:"service_item_id" gorm:"type:char(27);index;not null"`
	TeamMemberID  *KSUID            `json:"team_member_id,omitempty" gorm:"type:char(27);index"`
	StartTime     time.Time         `json:"start_time" gorm:"not null;index"`
	EndTime       time.Time         `json:"end_time" gorm:"not null"`
	Status        AppointmentStatus `json:"status" gorm:"size:20;not null;default:'scheduled'"`
	Notes         *string           `json:"notes,omitempty" gorm:"type:text"`
	CreatedAt     time.Time         `json:"created_at"`
	UpdatedAt     time.Time         `json:"updated_at"`
	DeletedAt     gorm.DeletedAt    `json:"-" gorm:"index"`

	// Relationships
	Business    Business    `json:"-" gorm:"foreignKey:BusinessID"`
	Branch      Branch      `json:"-" gorm:"foreignKey:BranchID"`
	Customer    Customer    `json:"-" gorm:"foreignKey:CustomerID"`
	ServiceItem ServiceItem `json:"-" gorm:"foreignKey:ServiceItemID"`
	TeamMember  *TeamMember `json:"-" gorm:"foreignKey:TeamMemberID"`
}

// CustomerServiceRecord stores details of a service provided to a customer.
type CustomerServiceRecord struct {
	ID            KSUID          `json:"id" gorm:"type:char(27);primaryKey"`
	BusinessID    KSUID          `json:"business_id" gorm:"type:char(27);index;not null"`
	BranchID      KSUID          `json:"branch_id" gorm:"type:char(27);index;not null"`
	CustomerID    KSUID          `json:"customer_id" gorm:"type:char(27);index;not null"`
	AppointmentID *KSUID         `json:"appointment_id,omitempty" gorm:"type:char(27);index"` // Link to the appointment
	ServiceItemID KSUID          `json:"service_item_id" gorm:"type:char(27);index;not null"`
	TeamMemberID  KSUID          `json:"team_member_id" gorm:"type:char(27);index;not null"`
	ServiceDate   time.Time      `json:"service_date" gorm:"not null"`
	Notes         *string        `json:"notes,omitempty" gorm:"type:text"`
	Feedback      *string        `json:"feedback,omitempty" gorm:"type:text"`
	Rating        *int           `json:"rating,omitempty" gorm:"type:smallint"` // e.g., 1-5 stars
	CreatedAt     time.Time      `json:"created_at"`
	UpdatedAt     time.Time      `json:"updated_at"`
	DeletedAt     gorm.DeletedAt `json:"-" gorm:"index"`

	// Relationships
	Business    Business     `json:"-" gorm:"foreignKey:BusinessID"`
	Branch      Branch       `json:"-" gorm:"foreignKey:BranchID"`
	Customer    Customer     `json:"-" gorm:"foreignKey:CustomerID"`
	Appointment *Appointment `json:"-" gorm:"foreignKey:AppointmentID"`
	ServiceItem ServiceItem  `json:"-" gorm:"foreignKey:ServiceItemID"`
	TeamMember  TeamMember   `json:"-" gorm:"foreignKey:TeamMemberID"`
}

// --- Business Goals ---

// GoalType defines the type of the business goal.
type GoalType string

const (
	GoalTypeRevenue          GoalType = "revenue"
	GoalTypeNewCustomers     GoalType = "new_customers"
	GoalTypeCustomerSpend    GoalType = "average_customer_spend"
	GoalTypeServiceCount     GoalType = "service_count"
	GoalTypeProductSales     GoalType = "product_sales"
)

// GoalStatus defines the status of a business goal.
type GoalStatus string

const (
	GoalStatusInProgress GoalStatus = "in_progress"
	GoalStatusAchieved   GoalStatus = "achieved"
	GoalStatusMissed     GoalStatus = "missed"
	GoalStatusCancelled  GoalStatus = "cancelled"
)

// BusinessGoal represents a specific target or objective for a business.
type BusinessGoal struct {
	ID            KSUID          `json:"id" gorm:"type:char(27);primaryKey"`
	BusinessID    KSUID          `json:"business_id" gorm:"type:char(27);index;not null"`
	Title         string         `json:"title" gorm:"size:255;not null"`
	Description   *string        `json:"description,omitempty" gorm:"type:text"`
	Type          GoalType       `json:"type" gorm:"size:50;not null;index"`
	TargetValue   float64        `json:"target_value" gorm:"type:decimal(15,2)"`
	CurrentValue  float64        `json:"current_value" gorm:"type:decimal(15,2);default:0"`
	StartDate     time.Time      `json:"start_date" gorm:"not null"`
	EndDate       time.Time      `json:"end_date" gorm:"not null"`
	Status        GoalStatus     `json:"status" gorm:"size:20;not null;default:'in_progress'"`
	ParentGoalID  *KSUID         `json:"parent_goal_id,omitempty" gorm:"type:char(27);index"`
	RelatedMetric *string        `json:"related_metric,omitempty" gorm:"size:100"`
	CreatedAt     time.Time      `json:"created_at"`
	UpdatedAt     time.Time      `json:"updated_at"`
	DeletedAt     gorm.DeletedAt `json:"-" gorm:"index"`

	// Relationships
	Business   Business      `json:"-" gorm:"foreignKey:BusinessID"`
	ParentGoal *BusinessGoal `json:"-" gorm:"foreignKey:ParentGoalID"`
}

// Note: TableName() and BeforeCreate() hooks present in actual models are omitted here for brevity,
// as this document focuses on the struct definitions for design overview.
// The gorm tags like type:char(27) for KSUID fields are crucial for DB schema.
// Validation tags (like validate:"required") are shown where present in original .go or design doc,
// but actual validation logic might be in service/handler layers.